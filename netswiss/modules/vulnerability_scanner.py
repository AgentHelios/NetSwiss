"""
Network Swiss Army Knife - Vulnerability Scanner Module
"""

import re
import json
import time
from typing import Dict, Any, List, Optional
import urllib.request
import urllib.parse

import nmap
import requests

from .. import modules

@modules.register_module("vulnerability_scanner", modules.NetworkModule)
class VulnerabilityScanner(modules.NetworkModule):
    """Vulnerability scanning functionality."""
    
    def __init__(self, config=None):
        super().__init__(config)
        self.timeout = config.get('timeout', 10.0)
        self.nmapper = nmap.PortScanner()
        self.cve_api_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    
    def get_description(self):
        return "Perform basic vulnerability scanning on target hosts"
    
    def get_help(self):
        return """
        Vulnerability Scanner Module
        
        Usage: netswiss vulnerability_scanner [options] <target>
        
        Options:
          --ports PORTS      Port range to scan (e.g., 1-1024, 22,80,443) [default: common]
          --timeout SECONDS  Timeout for responses [default: 10.0]
          --level LEVEL      Scan level (basic, standard, aggressive) [default: standard]
          
        Examples:
          netswiss vulnerability_scanner 192.168.1.10
          netswiss vulnerability_scanner --ports 22,80,443 10.0.0.5
          netswiss vulnerability_scanner --level aggressive 192.168.1.1
        """
    
    def run(self, target: str, ports: str = 'common', level: str = 'standard', **kwargs) -> Dict[str, Any]:
        """
        Scan target host for vulnerabilities.
        
        Args:
            target: IP address or hostname to scan
            ports: Port range to scan (e.g., 1-1024, 22,80,443, or 'common')
            level: Scan level (basic, standard, aggressive)
            
        Returns:
            Dictionary containing vulnerability scan results
        """
        # Override instance config with run parameters
        self.timeout = kwargs.get('timeout', self.timeout)
        
        # Determine port range
        if ports == 'common':
            ports_arg = '-F'  # Fast mode - common ports
        else:
            ports_arg = f'-p {ports}'
        
        # Determine scan level
        if level == 'basic':
            script_arg = '--script=vuln --script-args=safe=1'
        elif level == 'standard':
            script_arg = '--script=vuln'
        elif level == 'aggressive':
            script_arg = '--script=vuln,exploit,auth,brute'
        else:
            raise ValueError(f"Unknown scan level: {level}")
        
        # Build arguments for nmap
        args = f"{ports_arg} -sV {script_arg} --host-timeout {int(self.timeout)}s"
        
        try:
            # Run nmap scan
            self.nmapper.scan(hosts=target, arguments=args)
            
            # Process results
            results = {
                'target': target,
                'scan_level': level,
                'vulnerabilities': []
            }
            
            # Check if target was scanned
            if target not in self.nmapper.all_hosts():
                return results
            
            # Process script output for vulnerabilities
            if 'hostscript' in self.nmapper[target]:
                for script in self.nmapper[target]['hostscript']:
                    vuln = self._parse_script_output(script)
                    if vuln:
                        results['vulnerabilities'].append(vuln)
            
            # Process port script output
            for proto in self.nmapper[target].all_protocols():
                for port in self.nmapper[target][proto].keys():
                    port_info = self.nmapper[target][proto][port]
                    
                    if 'script' in port_info:
                        for script_name, output in port_info['script'].items():
                            if script_name.startswith('vuln-') or 'vuln' in script_name:
                                vuln = self._parse_script_output({
                                    'id': script_name,
                                    'output': output
                                })
                                
                                if vuln:
                                    vuln['port'] = port
                                    vuln['protocol'] = proto
                                    vuln['service'] = port_info.get('name', '')
                                    vuln['product'] = port_info.get('product', '')
                                    vuln['version'] = port_info.get('version', '')
                                    
                                    results['vulnerabilities'].append(vuln)
            
            # For services with version info, check for known vulnerabilities
            for proto in self.nmapper[target].all_protocols():
                for port in self.nmapper[target][proto].keys():
                    port_info = self.nmapper[target][proto][port]
                    
                    if 'product' in port_info and port_info['product'] and 'version' in port_info and port_info['version']:
                        product = port_info['product']
                        version = port_info['version']
                        
                        # Check for CVEs
                        cves = self._check_cves(product, version)
                        
                        for cve in cves:
                            vuln = {
                                'id': cve['id'],
                                'type': 'cve',
                                'name': cve.get('name', ''),
                                'description': cve.get('description', ''),
                                'severity': cve.get('severity', 'unknown'),
                                'port': port,
                                'protocol': proto,
                                'service': port_info.get('name', ''),
                                'product': product,
                                'version': version,
                                'source': 'NVD CVE Database'
                            }
                            
                            results['vulnerabilities'].append(vuln)
            
            # Add summary
            results['total_vulnerabilities'] = len(results['vulnerabilities'])
            
            # Count by severity
            severity_count = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0, 'unknown': 0}
            for vuln in results['vulnerabilities']:
                severity = vuln.get('severity', 'unknown').lower()
                if severity in severity_count:
                    severity_count[severity] += 1
                else:
                    severity_count['unknown'] += 1
            
            results['severity_summary'] = severity_count
            
            return results
            
        except nmap.PortScannerError as e:
            raise RuntimeError(f"Nmap vulnerability scan failed: {str(e)}")
        except Exception as e:
            raise RuntimeError(f"Vulnerability scanning failed: {str(e)}")
    
    def _parse_script_output(self, script: Dict[str, str]) -> Optional[Dict[str, Any]]:
        """Parse nmap script output for vulnerability information."""
        script_id = script['id']
        output = script['output']
        
        # Skip non-vulnerability scripts
        if not (script_id.startswith('vuln-') or 'vuln' in script_id or 'exploit' in script_id):
            return None
        
        # Extract vulnerability details
        vuln = {
            'id': script_id,
            'type': 'nmap_script',
            'output': output,
            'source': 'Nmap Script'
        }
        
        # Try to extract CVE IDs
        cve_pattern = r'CVE-\d{4}-\d{4,7}'
        cve_matches = re.findall(cve_pattern, output)
        if cve_matches:
            vuln['cve_ids'] = cve_matches
            # Use first CVE as ID if available
            vuln['id'] = cve_matches[0]
            vuln['type'] = 'cve'
        
        # Try to extract severity
        severity_pattern = r'CVSS: (\d+\.\d+)'
        severity_match = re.search(severity_pattern, output)
        if severity_match:
            cvss_score = float(severity_match.group(1))
            vuln['cvss_score'] = cvss_score
            
            # Convert CVSS score to severity
            if cvss_score >= 9.0:
                vuln['severity'] = 'critical'
            elif cvss_score >= 7.0:
                vuln['severity'] = 'high'
            elif cvss_score >= 4.0:
                vuln['severity'] = 'medium'
            else:
                vuln['severity'] = 'low'
        else:
            # Try to find severity words
            if re.search(r'critical', output, re.I):
                vuln['severity'] = 'critical'
            elif re.search(r'high', output, re.I):
                vuln['severity'] = 'high'
            elif re.search(r'medium', output, re.I):
                vuln['severity'] = 'medium'
            elif re.search(r'low', output, re.I):
                vuln['severity'] = 'low'
            else:
                vuln['severity'] = 'unknown'
        
        return vuln
    
    def _check_cves(self, product: str, version: str) -> List[Dict[str, Any]]:
        """Check for CVEs for a specific product and version."""
        cves = []
        
        try:
            # Prepare search query
            query = f"{product} {version}"
            params = {
                'keywordSearch': query,
                'resultsPerPage': 10
            }
            
            # Make request to NVD API
            url = f"{self.cve_api_url}?{urllib.parse.urlencode(params)}"
            headers = {'User-Agent': 'NetSwiss Vulnerability Scanner/1.0'}
            
            response = requests.get(url, headers=headers, timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                
                if 'vulnerabilities' in data:
                    for vuln_data in data['vulnerabilities']:
                        if 'cve' in vuln_data:
                            cve = vuln_data['cve']
                            
                            # Extract relevant information
                            cve_info = {
                                'id': cve.get('id', ''),
                                'name': cve.get('id', ''),
                                'description': '',
                                'severity': 'unknown',
                                'cvss_score': None
                            }
                            
                            # Get description
                            if 'descriptions' in cve:
                                for desc in cve['descriptions']:
                                    if desc.get('lang') == 'en':
                                        cve_info['description'] = desc.get('value', '')
                                        break
                            
                            # Get metrics
                            if 'metrics' in cve:
                                if 'cvssMetricV31' in cve['metrics']:
                                    metric = cve['metrics']['cvssMetricV31'][0]
                                    if 'cvssData' in metric:
                                        cvss_data = metric['cvssData']
                                        cve_info['cvss_score'] = cvss_data.get('baseScore')
                                        cve_info['severity'] = cvss_data.get('baseSeverity', '').lower()
                                elif 'cvssMetricV2' in cve['metrics']:
                                    metric = cve['metrics']['cvssMetricV2'][0]
                                    if 'cvssData' in metric:
                                        cvss_data = metric['cvssData']
                                        cve_info['cvss_score'] = cvss_data.get('baseScore')
                                        
                                        # Convert CVSS v2 score to severity
                                        score = cvss_data.get('baseScore')
                                        if score is not None:
                                            if score >= 9.0:
                                                cve_info['severity'] = 'critical'
                                            elif score >= 7.0:
                                                cve_info['severity'] = 'high'
                                            elif score >= 4.0:
                                                cve_info['severity'] = 'medium'
                                            else:
                                                cve_info['severity'] = 'low'
                            
                            cves.append(cve_info)
        except:
            # Silently fail on API errors
            pass
        
        return cves
